cmake_minimum_required(VERSION 3.17)

set(CMAKE_C_STANDARD 99)
set(PUBLIC_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/main/c)

project(mufft LANGUAGES C)

if (CMAKE_COMPILER_IS_GNUCC OR (${CMAKE_C_COMPILER_ID} MATCHES "Clang"))
    # Cannot safely use -ffast-math, breaks on GCC due to reliance on -0.0f behavior.
    set(MUFFT_C_FLAGS -Wall -Wextra)
elseif (MSVC)
    set(MUFFT_C_FLAGS /fp:precise /D_CRT_SECURE_NO_WARNINGS /wd4267 /wd4244 /wd4309 /wd4005 /MP /DNOMINMAX)
endif()

message("Processor: ${CMAKE_SYSTEM_PROCESSOR}")

option(MUFFT_SIMD_SSE "Enable SSE support if present" ON)
option(MUFFT_SIMD_SSE3 "Enable SSE3 support if present" ON)
option(MUFFT_SIMD_AVX "Enable AVX support if present" ON)
option(MUFFT_ENABLE_FFTW "Enable FFTW support" OFF)

if (ANDROID)
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)
endif()

add_library(mufft STATIC src/main/c/fft.c src/main/c/kernel.c src/main/c/cpu.c)

target_compile_options(mufft PRIVATE -Wall -Wextra -DMUFFT_HAVE_X86 ${MUFFT_C_FLAGS})

target_include_directories(mufft PUBLIC ${PUBLIC_SOURCE_DIR})

target_link_libraries(mufft PRIVATE m)

if (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")
    target_compile_definitions(mufft PRIVATE MUFFT_HAVE_X86)
    target_sources(mufft PRIVATE src/main/c/simd/kernel.h)
    message("Enabling x86 SIMD support.")
    if (MUFFT_SIMD_SSE)
        add_library(mufft-sse STATIC src/main/c/simd/kernel.sse.c)
        if (CMAKE_COMPILER_IS_GNUCC OR (${CMAKE_C_COMPILER_ID} MATCHES "Clang"))
            target_compile_options(mufft-sse PRIVATE -msse -mno-sse3 -mno-avx)
        endif()
        target_compile_options(mufft-sse PRIVATE ${MUFFT_C_FLAGS})
        target_compile_definitions(mufft PRIVATE MUFFT_HAVE_SSE)
        target_link_libraries(mufft PRIVATE mufft-sse)
    endif()

    if (MUFFT_SIMD_SSE3)
        add_library(mufft-sse3 STATIC src/main/c/simd/kernel.sse3.c)
        if (CMAKE_COMPILER_IS_GNUCC OR (${CMAKE_C_COMPILER_ID} MATCHES "Clang"))
            target_compile_options(mufft-sse3 PRIVATE -msse -msse3 -mno-avx)
        endif()
        target_compile_options(mufft-sse3 PRIVATE ${MUFFT_C_FLAGS})
        target_compile_definitions(mufft PRIVATE MUFFT_HAVE_SSE3)
        target_link_libraries(mufft PRIVATE mufft-sse3)
    endif()

    if (MUFFT_SIMD_AVX)
        add_library(mufft-avx STATIC src/main/c/simd/kernel.avx.c)
        if (CMAKE_COMPILER_IS_GNUCC OR (${CMAKE_C_COMPILER_ID} MATCHES "Clang"))
            target_compile_options(mufft-avx PRIVATE -msse -msse3 -mavx)
        endif()
        target_compile_options(mufft-avx PRIVATE ${MUFFT_C_FLAGS})
        target_compile_definitions(mufft PRIVATE MUFFT_HAVE_AVX)
        target_link_libraries(mufft PRIVATE mufft-avx)
    endif()
endif()

if (MUFFT_ENABLE_FFTW)
    include(FindPkgConfig)
    pkg_check_modules(FFTW3f fftw3f)
    if (FFTW3f_FOUND)
        message("Found FFTW, enabling bench and testing.")
        message("FFTW3f libraries: ${FFTW3f_LIBRARIES}")
        message("FFTW3f include directories: ${FFTW3f_INCLUDE_DIRS}")
        message("FFTW3f CFLAGS: ${FFTW3f_CFLAGS_OTHER}")
        message("FFTW3f link directory: ${FFTW3f_LIBRARY_DIRS}")
        # target_link_directories is 3.13 apparently.
        link_directories(${FFTW3f_LIBRARY_DIRS})
        add_executable(muFFT-bench src/main/c/bench.c)
        target_link_libraries(muFFT-bench PRIVATE ${FFTW3f_LIBRARIES} mufft)
        target_include_directories(muFFT-bench PRIVATE ${FFTW3f_INCLUDE_DIRS})
        target_compile_options(muFFT-bench PRIVATE ${MUFFT_C_FLAGS} ${FFTW3f_CFLAGS_OTHER})
        #target_link_directories(muFFT-bench PRIVATE ${FFTW3f_LIBRARY_DIRS})

        add_executable(muFFT-test src/main/c/test.c)
        target_link_libraries(muFFT-test PRIVATE ${FFTW3f_LIBRARIES} mufft)
        target_include_directories(muFFT-test PRIVATE ${FFTW3f_INCLUDE_DIRS})
        target_compile_options(muFFT-test PRIVATE ${MUFFT_C_FLAGS} ${FFTW3f_CFLAGS_OTHER})
        #target_link_directories(muFFT-test PRIVATE ${FFTW3f_LIBRARY_DIRS})
    endif()
endif()
